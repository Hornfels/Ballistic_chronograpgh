

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon Jun 27 12:21:10 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F44K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    17                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    19  0000                     
    20                           ; Version 2.35
    21                           ; Generated 05/05/2021 GMT
    22                           ; 
    23                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution. Publication is not required when
    37                           ;        this file is used in an embedded application.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F44K22 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     _ADCON0bits	set	4034
    56  0000                     _ANSELA	set	3896
    57  0000                     _PORTD	set	3971
    58  0000                     _ADCON0	set	4034
    59  0000                     _ADRESH	set	4036
    60  0000                     _OSCCON	set	4051
    61  0000                     _LATC	set	3979
    62  0000                     _TRISA	set	3986
    63  0000                     _TRISD	set	3989
    64  0000                     _ADCON2	set	4032
    65  0000                     _ADCON1	set	4033
    66                           
    67                           ; #config settings
    68                           
    69                           	psect	cinit
    70  000296                     __pcinit:
    71                           	callstack 0
    72  000296                     start_initialization:
    73                           	callstack 0
    74  000296                     __initialization:
    75                           	callstack 0
    76                           
    77                           ; Clear objects allocated to COMRAM (6 bytes)
    78  000296  6A19               	clrf	(__pbssCOMRAM+5)& (0+255),c
    79  000298  6A18               	clrf	(__pbssCOMRAM+4)& (0+255),c
    80  00029A  6A17               	clrf	(__pbssCOMRAM+3)& (0+255),c
    81  00029C  6A16               	clrf	(__pbssCOMRAM+2)& (0+255),c
    82  00029E  6A15               	clrf	(__pbssCOMRAM+1)& (0+255),c
    83  0002A0  6A14               	clrf	__pbssCOMRAM& (0+255),c
    84  0002A2                     end_of_initialization:
    85                           	callstack 0
    86  0002A2                     __end_of__initialization:
    87                           	callstack 0
    88  0002A2  901A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    89  0002A4  921A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    90  0002A6  0100               	movlb	0
    91  0002A8  EFD4  F000         	goto	_main	;jump to C main() function
    92                           
    93                           	psect	bssCOMRAM
    94  000014                     __pbssCOMRAM:
    95                           	callstack 0
    96  000014                     _LCD_RS_flag:
    97                           	callstack 0
    98  000014                     	ds	2
    99  000016                     _threshold_back:
   100                           	callstack 0
   101  000016                     	ds	2
   102  000018                     _threshold_front:
   103                           	callstack 0
   104  000018                     	ds	2
   105                           
   106                           	psect	cstackCOMRAM
   107  000001                     __pcstackCOMRAM:
   108                           	callstack 0
   109  000001                     ?_read_adc:
   110                           	callstack 0
   111  000001                     ?___awdiv:
   112                           	callstack 0
   113  000001                     change_position@position:
   114                           	callstack 0
   115  000001                     ___awdiv@dividend:
   116                           	callstack 0
   117                           
   118                           ; 2 bytes @ 0x0
   119  000001                     	ds	2
   120  000003                     read_adc@result:
   121                           	callstack 0
   122  000003                     ___awdiv@divisor:
   123                           	callstack 0
   124                           
   125                           ; 2 bytes @ 0x2
   126  000003                     	ds	2
   127  000005                     ___awdiv@counter:
   128                           	callstack 0
   129                           
   130                           ; 1 bytes @ 0x4
   131  000005                     	ds	1
   132  000006                     ___awdiv@sign:
   133                           	callstack 0
   134                           
   135                           ; 1 bytes @ 0x5
   136  000006                     	ds	1
   137  000007                     ___awdiv@quotient:
   138                           	callstack 0
   139                           
   140                           ; 2 bytes @ 0x6
   141  000007                     	ds	2
   142  000009                     calibrate@i:
   143                           	callstack 0
   144                           
   145                           ; 2 bytes @ 0x8
   146  000009                     	ds	2
   147  00000B                     calibrate@i_122:
   148                           	callstack 0
   149                           
   150                           ; 2 bytes @ 0xA
   151  00000B                     	ds	2
   152  00000D                     calibrate@sum:
   153                           	callstack 0
   154                           
   155                           ; 2 bytes @ 0xC
   156  00000D                     	ds	2
   157  00000F                     ??_main:
   158                           
   159                           ; 1 bytes @ 0xE
   160  00000F                     	ds	1
   161  000010                     main@front:
   162                           	callstack 0
   163                           
   164                           ; 2 bytes @ 0xF
   165  000010                     	ds	2
   166  000012                     main@back:
   167                           	callstack 0
   168                           
   169                           ; 2 bytes @ 0x11
   170  000012                     	ds	2
   171                           
   172 ;;
   173 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   174 ;;
   175 ;; *************** function _main *****************
   176 ;; Defined at:
   177 ;;		line 90 in file "main.c"
   178 ;; Parameters:    Size  Location     Type
   179 ;;		None
   180 ;; Auto vars:     Size  Location     Type
   181 ;;  back            2   17[COMRAM] int 
   182 ;;  front           2   15[COMRAM] int 
   183 ;; Return value:  Size  Location     Type
   184 ;;                  1    wreg      void 
   185 ;; Registers used:
   186 ;;		wreg, status,2, status,0, cstack
   187 ;; Tracked objects:
   188 ;;		On entry : 0/0
   189 ;;		On exit  : 0/0
   190 ;;		Unchanged: 0/0
   191 ;; Data sizes:     COMRAM   BANK1   BANK2   BANK0
   192 ;;      Params:         0       0       0       0
   193 ;;      Locals:         4       0       0       0
   194 ;;      Temps:          1       0       0       0
   195 ;;      Totals:         5       0       0       0
   196 ;;Total ram usage:        5 bytes
   197 ;; Hardware stack levels required when called: 3
   198 ;; This function calls:
   199 ;;		_calibrate
   200 ;;		_change_position
   201 ;;		_read_adc
   202 ;; This function is called by:
   203 ;;		Startup code after reset
   204 ;; This function uses a non-reentrant model
   205 ;;
   206                           
   207                           	psect	text0
   208  0001A8                     __ptext0:
   209                           	callstack 0
   210  0001A8                     _main:
   211                           	callstack 28
   212  0001A8                     
   213                           ;main.c: 91: 
   214  0001A8  50D3               	movf	211,w,c	;volatile
   215  0001AA  0B8F               	andlw	143
   216  0001AC  0970               	iorlw	112
   217  0001AE  6ED3               	movwf	211,c	;volatile
   218  0001B0                     
   219                           ;main.c: 96: 
   220  0001B0  010F               	movlb	15	; () banked
   221  0001B2  6938               	setf	56,b	;volatile
   222  0001B4                     
   223                           ; BSR set to: 15
   224                           ;main.c: 97: 
   225  0001B4  6892               	setf	146,c	;volatile
   226  0001B6                     
   227                           ; BSR set to: 15
   228                           ;main.c: 100: 
   229  0001B6  0E00               	movlw	0
   230  0001B8  6E95               	movwf	149,c	;volatile
   231  0001BA                     
   232                           ; BSR set to: 15
   233                           ;main.c: 103: 
   234  0001BA  0E01               	movlw	1
   235  0001BC  6EC2               	movwf	194,c	;volatile
   236  0001BE                     
   237                           ; BSR set to: 15
   238                           ;main.c: 105: 
   239  0001BE  0E00               	movlw	0
   240  0001C0  6EC1               	movwf	193,c	;volatile
   241  0001C2                     
   242                           ; BSR set to: 15
   243                           ;main.c: 107: 
   244  0001C2  0E2D               	movlw	45
   245  0001C4  6EC0               	movwf	192,c	;volatile
   246  0001C6                     
   247                           ; BSR set to: 15
   248                           ;main.c: 109: 
   249  0001C6  0E00               	movlw	0
   250  0001C8  6E95               	movwf	149,c	;volatile
   251  0001CA                     
   252                           ; BSR set to: 15
   253                           ;main.c: 114:             while(1) {
   254  0001CA  EC09  F000         	call	_calibrate	;wreg free
   255  0001CE                     
   256                           ;main.c: 116:                 int back = read_adc();
   257  0001CE  0E00               	movlw	0
   258  0001D0  6E02               	movwf	(change_position@position+1)^0,c
   259  0001D2  0E00               	movlw	0
   260  0001D4  6E01               	movwf	change_position@position^0,c
   261  0001D6  EC25  F001         	call	_change_position	;wreg free
   262  0001DA                     l1260:
   263                           
   264                           ;main.c: 119: 
   265  0001DA  EC39  F001         	call	_read_adc	;wreg free
   266  0001DE  C001  F010         	movff	?_read_adc,main@front
   267  0001E2  C002  F011         	movff	?_read_adc+1,main@front+1
   268  0001E6                     
   269                           ;main.c: 121: 
   270  0001E6  5018               	movf	_threshold_front^0,w,c
   271  0001E8  5C10               	subwf	main@front^0,w,c
   272  0001EA  5011               	movf	(main@front+1)^0,w,c
   273  0001EC  0A80               	xorlw	128
   274  0001EE  6E0F               	movwf	??_main^0,c
   275  0001F0  5019               	movf	(_threshold_front+1)^0,w,c
   276  0001F2  0A80               	xorlw	128
   277  0001F4  580F               	subwfb	??_main^0,w,c
   278  0001F6  B0D8               	btfsc	status,0,c
   279  0001F8  EF00  F001         	goto	u281
   280  0001FC  EF02  F001         	goto	u280
   281  000200                     u281:
   282  000200  EFED  F000         	goto	l1260
   283  000204                     u280:
   284  000204                     
   285                           ;main.c: 126:             }
   286  000204  0E0D               	movlw	13
   287  000206  6E83               	movwf	131,c	;volatile
   288  000208                     
   289                           ;main.c: 127: 
   290  000208  0E00               	movlw	0
   291  00020A  6E02               	movwf	(change_position@position+1)^0,c
   292  00020C  0E01               	movlw	1
   293  00020E  6E01               	movwf	change_position@position^0,c
   294  000210  EC25  F001         	call	_change_position	;wreg free
   295  000214                     l1268:
   296                           
   297                           ;main.c: 131:     }
   298  000214  EC39  F001         	call	_read_adc	;wreg free
   299  000218  C001  F012         	movff	?_read_adc,main@back
   300  00021C  C002  F013         	movff	?_read_adc+1,main@back+1
   301  000220  5016               	movf	_threshold_back^0,w,c
   302  000222  5C12               	subwf	main@back^0,w,c
   303  000224  5013               	movf	(main@back+1)^0,w,c
   304  000226  0A80               	xorlw	128
   305  000228  6E0F               	movwf	??_main^0,c
   306  00022A  5017               	movf	(_threshold_back+1)^0,w,c
   307  00022C  0A80               	xorlw	128
   308  00022E  580F               	subwfb	??_main^0,w,c
   309  000230  B0D8               	btfsc	status,0,c
   310  000232  EF1D  F001         	goto	u291
   311  000236  EF1F  F001         	goto	u290
   312  00023A                     u291:
   313  00023A  EF0A  F001         	goto	l1268
   314  00023E                     u290:
   315  00023E  0EDD               	movlw	221
   316  000240  6E83               	movwf	131,c	;volatile
   317  000242  EF0A  F001         	goto	l1268
   318  000246  EF07  F000         	goto	start
   319  00024A                     __end_of_main:
   320                           	callstack 0
   321                           
   322 ;; *************** function _calibrate *****************
   323 ;; Defined at:
   324 ;;		line 62 in file "main.c"
   325 ;; Parameters:    Size  Location     Type
   326 ;;		None
   327 ;; Auto vars:     Size  Location     Type
   328 ;;  i               2   10[COMRAM] int 
   329 ;;  i               2    8[COMRAM] int 
   330 ;;  sum             2   12[COMRAM] int 
   331 ;; Return value:  Size  Location     Type
   332 ;;                  1    wreg      void 
   333 ;; Registers used:
   334 ;;		wreg, status,2, status,0, cstack
   335 ;; Tracked objects:
   336 ;;		On entry : 0/0
   337 ;;		On exit  : 0/0
   338 ;;		Unchanged: 0/0
   339 ;; Data sizes:     COMRAM   BANK1   BANK2   BANK0
   340 ;;      Params:         0       0       0       0
   341 ;;      Locals:         6       0       0       0
   342 ;;      Temps:          0       0       0       0
   343 ;;      Totals:         6       0       0       0
   344 ;;Total ram usage:        6 bytes
   345 ;; Hardware stack levels used: 1
   346 ;; Hardware stack levels required when called: 2
   347 ;; This function calls:
   348 ;;		___awdiv
   349 ;;		_change_position
   350 ;;		_read_adc
   351 ;; This function is called by:
   352 ;;		_main
   353 ;; This function uses a non-reentrant model
   354 ;;
   355                           
   356                           	psect	text1
   357  000012                     __ptext1:
   358                           	callstack 0
   359  000012                     _calibrate:
   360                           	callstack 28
   361  000012                     
   362                           ;main.c: 64: 
   363  000012  0EDD               	movlw	221
   364  000014  6E83               	movwf	131,c	;volatile
   365                           
   366                           ;main.c: 65:         sum += read_adc();
   367  000016  0E00               	movlw	0
   368  000018  6E0E               	movwf	(calibrate@sum+1)^0,c
   369  00001A  0E00               	movlw	0
   370  00001C  6E0D               	movwf	calibrate@sum^0,c
   371  00001E                     
   372                           ;main.c: 67: 
   373  00001E  0E00               	movlw	0
   374  000020  6E02               	movwf	(change_position@position+1)^0,c
   375  000022  0E00               	movlw	0
   376  000024  6E01               	movwf	change_position@position^0,c
   377  000026  EC25  F001         	call	_change_position	;wreg free
   378  00002A                     
   379                           ;main.c: 69: 
   380  00002A  0E00               	movlw	0
   381  00002C  6E0A               	movwf	(calibrate@i+1)^0,c
   382  00002E  0E00               	movlw	0
   383  000030  6E09               	movwf	calibrate@i^0,c
   384  000032                     l1212:
   385                           
   386                           ;main.c: 71:     return;
   387  000032  EC39  F001         	call	_read_adc	;wreg free
   388  000036  5001               	movf	?_read_adc^0,w,c
   389  000038  260D               	addwf	calibrate@sum^0,f,c
   390  00003A  5002               	movf	(?_read_adc+1)^0,w,c
   391  00003C  220E               	addwfc	(calibrate@sum+1)^0,f,c
   392  00003E                     
   393                           ;main.c: 72: }
   394  00003E  4A09               	infsnz	calibrate@i^0,f,c
   395  000040  2A0A               	incf	(calibrate@i+1)^0,f,c
   396  000042  BE0A               	btfsc	(calibrate@i+1)^0,7,c
   397  000044  EF2D  F000         	goto	u261
   398  000048  500A               	movf	(calibrate@i+1)^0,w,c
   399  00004A  E109               	bnz	u260
   400  00004C  0E32               	movlw	50
   401  00004E  5C09               	subwf	calibrate@i^0,w,c
   402  000050  A0D8               	btfss	status,0,c
   403  000052  EF2D  F000         	goto	u261
   404  000056  EF2F  F000         	goto	u260
   405  00005A                     u261:
   406  00005A  EF19  F000         	goto	l1212
   407  00005E                     u260:
   408  00005E                     
   409                           ;main.c: 74: 
   410  00005E  C00D  F001         	movff	calibrate@sum,___awdiv@dividend
   411  000062  C00E  F002         	movff	calibrate@sum+1,___awdiv@dividend+1
   412  000066  0E00               	movlw	0
   413  000068  6E04               	movwf	(___awdiv@divisor+1)^0,c
   414  00006A  0E19               	movlw	25
   415  00006C  6E03               	movwf	___awdiv@divisor^0,c
   416  00006E  EC72  F000         	call	___awdiv	;wreg free
   417  000072  C001  F018         	movff	?___awdiv,_threshold_front
   418  000076  C002  F019         	movff	?___awdiv+1,_threshold_front+1
   419  00007A                     
   420                           ;main.c: 75: void main(void) {
   421  00007A  0E00               	movlw	0
   422  00007C  6E0E               	movwf	(calibrate@sum+1)^0,c
   423  00007E  0E00               	movlw	0
   424  000080  6E0D               	movwf	calibrate@sum^0,c
   425  000082                     
   426                           ;main.c: 76:     OSCCON = (OSCCON & 0b10001111) | 0b01110000;
   427  000082  0E00               	movlw	0
   428  000084  6E02               	movwf	(change_position@position+1)^0,c
   429  000086  0E01               	movlw	1
   430  000088  6E01               	movwf	change_position@position^0,c
   431  00008A  EC25  F001         	call	_change_position	;wreg free
   432                           
   433                           ;main.c: 78: 
   434  00008E  0E00               	movlw	0
   435  000090  6E0C               	movwf	(calibrate@i_122+1)^0,c
   436  000092  0E00               	movlw	0
   437  000094  6E0B               	movwf	calibrate@i_122^0,c
   438  000096                     l1228:
   439                           
   440                           ;main.c: 80: 
   441  000096  EC39  F001         	call	_read_adc	;wreg free
   442  00009A  5001               	movf	?_read_adc^0,w,c
   443  00009C  260D               	addwf	calibrate@sum^0,f,c
   444  00009E  5002               	movf	(?_read_adc+1)^0,w,c
   445  0000A0  220E               	addwfc	(calibrate@sum+1)^0,f,c
   446  0000A2                     
   447                           ;main.c: 81:     ANSELA = 0xff;
   448  0000A2  4A0B               	infsnz	calibrate@i_122^0,f,c
   449  0000A4  2A0C               	incf	(calibrate@i_122+1)^0,f,c
   450  0000A6  BE0C               	btfsc	(calibrate@i_122+1)^0,7,c
   451  0000A8  EF5F  F000         	goto	u271
   452  0000AC  500C               	movf	(calibrate@i_122+1)^0,w,c
   453  0000AE  E109               	bnz	u270
   454  0000B0  0E32               	movlw	50
   455  0000B2  5C0B               	subwf	calibrate@i_122^0,w,c
   456  0000B4  A0D8               	btfss	status,0,c
   457  0000B6  EF5F  F000         	goto	u271
   458  0000BA  EF61  F000         	goto	u270
   459  0000BE                     u271:
   460  0000BE  EF4B  F000         	goto	l1228
   461  0000C2                     u270:
   462  0000C2                     
   463                           ;main.c: 83: 
   464  0000C2  C00D  F001         	movff	calibrate@sum,___awdiv@dividend
   465  0000C6  C00E  F002         	movff	calibrate@sum+1,___awdiv@dividend+1
   466  0000CA  0E00               	movlw	0
   467  0000CC  6E04               	movwf	(___awdiv@divisor+1)^0,c
   468  0000CE  0E19               	movlw	25
   469  0000D0  6E03               	movwf	___awdiv@divisor^0,c
   470  0000D2  EC72  F000         	call	___awdiv	;wreg free
   471  0000D6  C001  F016         	movff	?___awdiv,_threshold_back
   472  0000DA  C002  F017         	movff	?___awdiv+1,_threshold_back+1
   473  0000DE                     
   474                           ;main.c: 85:     TRISD = 0x00;
   475  0000DE  0E00               	movlw	0
   476  0000E0  6E83               	movwf	131,c	;volatile
   477  0000E2  0012               	return		;funcret
   478  0000E4                     __end_of_calibrate:
   479                           	callstack 0
   480                           
   481 ;; *************** function _read_adc *****************
   482 ;; Defined at:
   483 ;;		line 28 in file "main.c"
   484 ;; Parameters:    Size  Location     Type
   485 ;;		None
   486 ;; Auto vars:     Size  Location     Type
   487 ;;  result          2    2[COMRAM] int 
   488 ;; Return value:  Size  Location     Type
   489 ;;                  2    0[COMRAM] int 
   490 ;; Registers used:
   491 ;;		wreg, status,2, status,0
   492 ;; Tracked objects:
   493 ;;		On entry : 0/0
   494 ;;		On exit  : 0/0
   495 ;;		Unchanged: 0/0
   496 ;; Data sizes:     COMRAM   BANK1   BANK2   BANK0
   497 ;;      Params:         2       0       0       0
   498 ;;      Locals:         2       0       0       0
   499 ;;      Temps:          0       0       0       0
   500 ;;      Totals:         4       0       0       0
   501 ;;Total ram usage:        4 bytes
   502 ;; Hardware stack levels used: 1
   503 ;; Hardware stack levels required when called: 1
   504 ;; This function calls:
   505 ;;		Nothing
   506 ;; This function is called by:
   507 ;;		_calibrate
   508 ;;		_main
   509 ;; This function uses a non-reentrant model
   510 ;;
   511                           
   512                           	psect	text2
   513  000272                     __ptext2:
   514                           	callstack 0
   515  000272                     _read_adc:
   516                           	callstack 29
   517  000272                     
   518                           ;main.c: 31: }
   519  000272  50C2               	movf	194,w,c	;volatile
   520  000274  0902               	iorlw	2
   521  000276  6EC2               	movwf	194,c	;volatile
   522  000278                     l1146:
   523                           
   524                           ;main.c: 36:     if (position == 0) {
   525  000278  B2C2               	btfsc	194,1,c	;volatile
   526  00027A  EF41  F001         	goto	u181
   527  00027E  EF43  F001         	goto	u180
   528  000282                     u181:
   529  000282  EF3C  F001         	goto	l1146
   530  000286                     u180:
   531  000286                     
   532                           ;main.c: 40: 
   533  000286  CFC4 F003          	movff	4036,read_adc@result	;volatile
   534  00028A  6A04               	clrf	(read_adc@result+1)^0,c
   535                           
   536                           ;main.c: 41:         ADCON0bits.CHS = 3;
   537  00028C  C003  F001         	movff	read_adc@result,?_read_adc
   538  000290  C004  F002         	movff	read_adc@result+1,?_read_adc+1
   539  000294  0012               	return		;funcret
   540  000296                     __end_of_read_adc:
   541                           	callstack 0
   542                           
   543 ;; *************** function _change_position *****************
   544 ;; Defined at:
   545 ;;		line 49 in file "main.c"
   546 ;; Parameters:    Size  Location     Type
   547 ;;  position        2    0[COMRAM] int 
   548 ;; Auto vars:     Size  Location     Type
   549 ;;		None
   550 ;; Return value:  Size  Location     Type
   551 ;;                  1    wreg      void 
   552 ;; Registers used:
   553 ;;		wreg, status,2, status,0
   554 ;; Tracked objects:
   555 ;;		On entry : 0/0
   556 ;;		On exit  : 0/0
   557 ;;		Unchanged: 0/0
   558 ;; Data sizes:     COMRAM   BANK1   BANK2   BANK0
   559 ;;      Params:         2       0       0       0
   560 ;;      Locals:         0       0       0       0
   561 ;;      Temps:          0       0       0       0
   562 ;;      Totals:         2       0       0       0
   563 ;;Total ram usage:        2 bytes
   564 ;; Hardware stack levels used: 1
   565 ;; Hardware stack levels required when called: 1
   566 ;; This function calls:
   567 ;;		Nothing
   568 ;; This function is called by:
   569 ;;		_calibrate
   570 ;;		_main
   571 ;; This function uses a non-reentrant model
   572 ;;
   573                           
   574                           	psect	text3
   575  00024A                     __ptext3:
   576                           	callstack 0
   577  00024A                     _change_position:
   578                           	callstack 29
   579  00024A                     
   580                           ;main.c: 51: 
   581  00024A  5001               	movf	change_position@position^0,w,c
   582  00024C  1002               	iorwf	(change_position@position+1)^0,w,c
   583  00024E  A4D8               	btfss	status,2,c
   584  000250  EF2C  F001         	goto	u191
   585  000254  EF2E  F001         	goto	u190
   586  000258                     u191:
   587  000258  EF34  F001         	goto	l1154
   588  00025C                     u190:
   589  00025C                     
   590                           ;main.c: 53: 
   591  00025C  50C2               	movf	194,w,c	;volatile
   592  00025E  0B83               	andlw	-125
   593  000260  0910               	iorlw	16
   594  000262  6EC2               	movwf	194,c	;volatile
   595                           
   596                           ;main.c: 54:     for (int i = 0; i < 50; i++) {
   597  000264  EF38  F001         	goto	l41
   598  000268                     l1154:
   599                           
   600                           ;main.c: 56:         sum += read_adc();
   601  000268  50C2               	movf	194,w,c	;volatile
   602  00026A  0B83               	andlw	-125
   603  00026C  090C               	iorlw	12
   604  00026E  6EC2               	movwf	194,c	;volatile
   605  000270                     l41:
   606  000270  0012               	return		;funcret
   607  000272                     __end_of_change_position:
   608                           	callstack 0
   609                           
   610 ;; *************** function ___awdiv *****************
   611 ;; Defined at:
   612 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awdiv.c"
   613 ;; Parameters:    Size  Location     Type
   614 ;;  dividend        2    0[COMRAM] int 
   615 ;;  divisor         2    2[COMRAM] int 
   616 ;; Auto vars:     Size  Location     Type
   617 ;;  quotient        2    6[COMRAM] int 
   618 ;;  sign            1    5[COMRAM] unsigned char 
   619 ;;  counter         1    4[COMRAM] unsigned char 
   620 ;; Return value:  Size  Location     Type
   621 ;;                  2    0[COMRAM] int 
   622 ;; Registers used:
   623 ;;		wreg, status,2, status,0
   624 ;; Tracked objects:
   625 ;;		On entry : 0/0
   626 ;;		On exit  : 0/0
   627 ;;		Unchanged: 0/0
   628 ;; Data sizes:     COMRAM   BANK1   BANK2   BANK0
   629 ;;      Params:         4       0       0       0
   630 ;;      Locals:         4       0       0       0
   631 ;;      Temps:          0       0       0       0
   632 ;;      Totals:         8       0       0       0
   633 ;;Total ram usage:        8 bytes
   634 ;; Hardware stack levels used: 1
   635 ;; Hardware stack levels required when called: 1
   636 ;; This function calls:
   637 ;;		Nothing
   638 ;; This function is called by:
   639 ;;		_calibrate
   640 ;; This function uses a non-reentrant model
   641 ;;
   642                           
   643                           	psect	text4
   644  0000E4                     __ptext4:
   645                           	callstack 0
   646  0000E4                     ___awdiv:
   647                           	callstack 28
   648  0000E4  0E00               	movlw	0
   649  0000E6  6E06               	movwf	___awdiv@sign^0,c
   650  0000E8  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
   651  0000EA  EF7B  F000         	goto	u200
   652  0000EE  EF79  F000         	goto	u201
   653  0000F2                     u201:
   654  0000F2  EF81  F000         	goto	l1166
   655  0000F6                     u200:
   656  0000F6  6C03               	negf	___awdiv@divisor^0,c
   657  0000F8  1E04               	comf	(___awdiv@divisor+1)^0,f,c
   658  0000FA  B0D8               	btfsc	status,0,c
   659  0000FC  2A04               	incf	(___awdiv@divisor+1)^0,f,c
   660  0000FE  0E01               	movlw	1
   661  000100  6E06               	movwf	___awdiv@sign^0,c
   662  000102                     l1166:
   663  000102  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
   664  000104  EF88  F000         	goto	u210
   665  000108  EF86  F000         	goto	u211
   666  00010C                     u211:
   667  00010C  EF8E  F000         	goto	l1172
   668  000110                     u210:
   669  000110  6C01               	negf	___awdiv@dividend^0,c
   670  000112  1E02               	comf	(___awdiv@dividend+1)^0,f,c
   671  000114  B0D8               	btfsc	status,0,c
   672  000116  2A02               	incf	(___awdiv@dividend+1)^0,f,c
   673  000118  0E01               	movlw	1
   674  00011A  1A06               	xorwf	___awdiv@sign^0,f,c
   675  00011C                     l1172:
   676  00011C  0E00               	movlw	0
   677  00011E  6E08               	movwf	(___awdiv@quotient+1)^0,c
   678  000120  0E00               	movlw	0
   679  000122  6E07               	movwf	___awdiv@quotient^0,c
   680  000124  5003               	movf	___awdiv@divisor^0,w,c
   681  000126  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
   682  000128  B4D8               	btfsc	status,2,c
   683  00012A  EF99  F000         	goto	u221
   684  00012E  EF9B  F000         	goto	u220
   685  000132                     u221:
   686  000132  EFC3  F000         	goto	l1194
   687  000136                     u220:
   688  000136  0E01               	movlw	1
   689  000138  6E05               	movwf	___awdiv@counter^0,c
   690  00013A  EFA3  F000         	goto	l1180
   691  00013E                     l1178:
   692  00013E  90D8               	bcf	status,0,c
   693  000140  3603               	rlcf	___awdiv@divisor^0,f,c
   694  000142  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
   695  000144  2A05               	incf	___awdiv@counter^0,f,c
   696  000146                     l1180:
   697  000146  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
   698  000148  EFA8  F000         	goto	u231
   699  00014C  EFAA  F000         	goto	u230
   700  000150                     u231:
   701  000150  EF9F  F000         	goto	l1178
   702  000154                     u230:
   703  000154                     l1182:
   704  000154  90D8               	bcf	status,0,c
   705  000156  3607               	rlcf	___awdiv@quotient^0,f,c
   706  000158  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
   707  00015A  5003               	movf	___awdiv@divisor^0,w,c
   708  00015C  5C01               	subwf	___awdiv@dividend^0,w,c
   709  00015E  5004               	movf	(___awdiv@divisor+1)^0,w,c
   710  000160  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
   711  000162  A0D8               	btfss	status,0,c
   712  000164  EFB6  F000         	goto	u241
   713  000168  EFB8  F000         	goto	u240
   714  00016C                     u241:
   715  00016C  EFBD  F000         	goto	l1190
   716  000170                     u240:
   717  000170  5003               	movf	___awdiv@divisor^0,w,c
   718  000172  5E01               	subwf	___awdiv@dividend^0,f,c
   719  000174  5004               	movf	(___awdiv@divisor+1)^0,w,c
   720  000176  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
   721  000178  8007               	bsf	___awdiv@quotient^0,0,c
   722  00017A                     l1190:
   723  00017A  90D8               	bcf	status,0,c
   724  00017C  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
   725  00017E  3203               	rrcf	___awdiv@divisor^0,f,c
   726  000180  2E05               	decfsz	___awdiv@counter^0,f,c
   727  000182  EFAA  F000         	goto	l1182
   728  000186                     l1194:
   729  000186  5006               	movf	___awdiv@sign^0,w,c
   730  000188  B4D8               	btfsc	status,2,c
   731  00018A  EFC9  F000         	goto	u251
   732  00018E  EFCB  F000         	goto	u250
   733  000192                     u251:
   734  000192  EFCF  F000         	goto	l1198
   735  000196                     u250:
   736  000196  6C07               	negf	___awdiv@quotient^0,c
   737  000198  1E08               	comf	(___awdiv@quotient+1)^0,f,c
   738  00019A  B0D8               	btfsc	status,0,c
   739  00019C  2A08               	incf	(___awdiv@quotient+1)^0,f,c
   740  00019E                     l1198:
   741  00019E  C007  F001         	movff	___awdiv@quotient,?___awdiv
   742  0001A2  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
   743  0001A6  0012               	return		;funcret
   744  0001A8                     __end_of___awdiv:
   745                           	callstack 0
   746                           
   747 ;; *************** function _int0 *****************
   748 ;; Defined at:
   749 ;;		line 24 in file "main.c"
   750 ;; Parameters:    Size  Location     Type
   751 ;;		None
   752 ;; Auto vars:     Size  Location     Type
   753 ;;		None
   754 ;; Return value:  Size  Location     Type
   755 ;;                  1    wreg      void 
   756 ;; Registers used:
   757 ;;		None
   758 ;; Tracked objects:
   759 ;;		On entry : 0/0
   760 ;;		On exit  : 0/0
   761 ;;		Unchanged: 0/0
   762 ;; Data sizes:     COMRAM   BANK1   BANK2   BANK0
   763 ;;      Params:         0       0       0       0
   764 ;;      Locals:         0       0       0       0
   765 ;;      Temps:          0       0       0       0
   766 ;;      Totals:         0       0       0       0
   767 ;;Total ram usage:        0 bytes
   768 ;; Hardware stack levels used: 1
   769 ;; This function calls:
   770 ;;		Nothing
   771 ;; This function is called by:
   772 ;;		Interrupt level 2
   773 ;; This function uses a non-reentrant model
   774 ;;
   775                           
   776                           	psect	intcode
   777  000008                     __pintcode:
   778                           	callstack 0
   779  000008                     _int0:
   780                           	callstack 28
   781                           
   782                           ;incstack = 0
   783  000008  821A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   784  00000A  921A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   785  00000C  0011               	retfie		f
   786  00000E                     __end_of_int0:
   787                           	callstack 0
   788  0000                     
   789                           	psect	rparam
   790  0000                     
   791                           	psect	temp
   792  00001A                     btemp:
   793                           	callstack 0
   794  00001A                     	ds	1
   795  0000                     int$flags	set	btemp
   796  0000                     wtemp8	set	btemp+1
   797  0000                     ttemp5	set	btemp+1
   798  0000                     ttemp6	set	btemp+4
   799  0000                     ttemp7	set	btemp+8
   800                           
   801                           	psect	idloc
   802                           
   803                           ;Config register IDLOC0 @ 0x200000
   804                           ;	unspecified, using default values
   805  200000                     	org	2097152
   806  200000  FF                 	db	255
   807                           
   808                           ;Config register IDLOC1 @ 0x200001
   809                           ;	unspecified, using default values
   810  200001                     	org	2097153
   811  200001  FF                 	db	255
   812                           
   813                           ;Config register IDLOC2 @ 0x200002
   814                           ;	unspecified, using default values
   815  200002                     	org	2097154
   816  200002  FF                 	db	255
   817                           
   818                           ;Config register IDLOC3 @ 0x200003
   819                           ;	unspecified, using default values
   820  200003                     	org	2097155
   821  200003  FF                 	db	255
   822                           
   823                           ;Config register IDLOC4 @ 0x200004
   824                           ;	unspecified, using default values
   825  200004                     	org	2097156
   826  200004  FF                 	db	255
   827                           
   828                           ;Config register IDLOC5 @ 0x200005
   829                           ;	unspecified, using default values
   830  200005                     	org	2097157
   831  200005  FF                 	db	255
   832                           
   833                           ;Config register IDLOC6 @ 0x200006
   834                           ;	unspecified, using default values
   835  200006                     	org	2097158
   836  200006  FF                 	db	255
   837                           
   838                           ;Config register IDLOC7 @ 0x200007
   839                           ;	unspecified, using default values
   840  200007                     	org	2097159
   841  200007  FF                 	db	255
   842                           
   843                           	psect	config
   844                           
   845                           ; Padding undefined space
   846  300000                     	org	3145728
   847  300000  FF                 	db	255
   848                           
   849                           ;Config register CONFIG1H @ 0x300001
   850                           ;	Oscillator Selection bits
   851                           ;	FOSC = INTIO7, Internal oscillator block, CLKOUT function on OSC2
   852                           ;	4X PLL Enable
   853                           ;	PLLCFG = 0x0, unprogrammed default
   854                           ;	Primary clock enable bit
   855                           ;	PRICLKEN = 0x1, unprogrammed default
   856                           ;	Fail-Safe Clock Monitor Enable bit
   857                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
   858                           ;	Internal/External Oscillator Switchover bit
   859                           ;	IESO = 0x0, unprogrammed default
   860  300001                     	org	3145729
   861  300001  69                 	db	105
   862                           
   863                           ;Config register CONFIG2L @ 0x300002
   864                           ;	unspecified, using default values
   865                           ;	Power-up Timer Enable bit
   866                           ;	PWRTEN = 0x1, unprogrammed default
   867                           ;	Brown-out Reset Enable bits
   868                           ;	BOREN = 0x3, unprogrammed default
   869                           ;	Brown Out Reset Voltage bits
   870                           ;	BORV = 0x3, unprogrammed default
   871  300002                     	org	3145730
   872  300002  1F                 	db	31
   873                           
   874                           ;Config register CONFIG2H @ 0x300003
   875                           ;	Watchdog Timer Enable bits
   876                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
   877                           ;	Watchdog Timer Postscale Select bits
   878                           ;	WDTPS = 0xF, unprogrammed default
   879  300003                     	org	3145731
   880  300003  3C                 	db	60
   881                           
   882                           ; Padding undefined space
   883  300004                     	org	3145732
   884  300004  FF                 	db	255
   885                           
   886                           ;Config register CONFIG3H @ 0x300005
   887                           ;	CCP2 MUX bit
   888                           ;	CCP2MX = 0x1, unprogrammed default
   889                           ;	PORTB A/D Enable bit
   890                           ;	PBADEN = 0x1, unprogrammed default
   891                           ;	P3A/CCP3 Mux bit
   892                           ;	CCP3MX = 0x1, unprogrammed default
   893                           ;	HFINTOSC Fast Start-up
   894                           ;	HFOFST = 0x1, unprogrammed default
   895                           ;	Timer3 Clock input mux bit
   896                           ;	T3CMX = 0x1, unprogrammed default
   897                           ;	ECCP2 B output mux bit
   898                           ;	P2BMX = 0x1, unprogrammed default
   899                           ;	MCLR Pin Enable bit
   900                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
   901  300005                     	org	3145733
   902  300005  BF                 	db	191
   903                           
   904                           ;Config register CONFIG4L @ 0x300006
   905                           ;	unspecified, using default values
   906                           ;	Stack Full/Underflow Reset Enable bit
   907                           ;	STVREN = 0x1, unprogrammed default
   908                           ;	Single-Supply ICSP Enable bit
   909                           ;	LVP = 0x1, unprogrammed default
   910                           ;	Extended Instruction Set Enable bit
   911                           ;	XINST = 0x0, unprogrammed default
   912                           ;	Background Debug
   913                           ;	DEBUG = 0x1, unprogrammed default
   914  300006                     	org	3145734
   915  300006  85                 	db	133
   916                           
   917                           ; Padding undefined space
   918  300007                     	org	3145735
   919  300007  FF                 	db	255
   920                           
   921                           ;Config register CONFIG5L @ 0x300008
   922                           ;	unspecified, using default values
   923                           ;	Code Protection Block 0
   924                           ;	CP0 = 0x1, unprogrammed default
   925                           ;	Code Protection Block 1
   926                           ;	CP1 = 0x1, unprogrammed default
   927  300008                     	org	3145736
   928  300008  03                 	db	3
   929                           
   930                           ;Config register CONFIG5H @ 0x300009
   931                           ;	unspecified, using default values
   932                           ;	Boot Block Code Protection bit
   933                           ;	CPB = 0x1, unprogrammed default
   934                           ;	Data EEPROM Code Protection bit
   935                           ;	CPD = 0x1, unprogrammed default
   936  300009                     	org	3145737
   937  300009  C0                 	db	192
   938                           
   939                           ;Config register CONFIG6L @ 0x30000A
   940                           ;	unspecified, using default values
   941                           ;	Write Protection Block 0
   942                           ;	WRT0 = 0x1, unprogrammed default
   943                           ;	Write Protection Block 1
   944                           ;	WRT1 = 0x1, unprogramm   945  30000A                     	org	3145738
   946  30000A  03                 	db	3
   947                           
   948                           ;Config register CONFIG6H @ 0x30000B
   949                           ;	unspecified, using default values
   950                           ;	Configuration Register Write Protection bit
   951                           ;	WRTC = 0x1, unprogrammed default
   952                           ;	Boot Block Write Protection bit
   953                           ;	WRTB = 0x1, unprogrammed default
   954                           ;	Data EEPROM Write Protection bit
   955                           ;	WRTD = 0x1, unprogrammed default
   956  30000B                     	org	3145739
   957  30000B  E0                 	db	224
   958                           
   959                           ;Config register CONFIG7L @ 0x30000C
   960                           ;	unspecified, using default values
   961                           ;	Table Read Protection Block 0
   962                           ;	EBTR0 = 0x1, unprogrammed default
   963                           ;	Table Read Protection Block 1
   964                           ;	EBTR1 = 0x1, unprogrammed default
   965  30000C                     	org	3145740
   966  30000C  03                 	db	3
   967                           
   968                           ;Config register CONFIG7H @ 0x30000D
   969                           ;	unspecified, using default values
   970                           ;	Boot Block Table Read Protection bit
   971                           ;	EBTRB = 0x1, unprogrammed default
   972  30000D                     	org	3145741
   973  30000D  40                 	db	64
   974                           tosu	equ	0xFFF
   975                           tosh	equ	0xFFE
   976                           tosl	equ	0xFFD
   977                           stkptr	equ	0xFFC
   978                           pclatu	equ	0xFFB
   979                           pclath	equ	0xFFA
   980                           pcl	equ	0xFF9
   981                           tblptru	equ	0xFF8
   982                           tblptrh	equ	0xFF7
   983                           tblptrl	equ	0xFF6
   984                           tablat	equ	0xFF5
   985                           prodh	equ	0xFF4
   986                           prodl	equ	0xFF3
   987                           indf0	equ	0xFEF
   988                           postinc0	equ	0xFEE
   989                           postdec0	equ	0xFED
   990                           preinc0	equ	0xFEC
   991                           plusw0	equ	0xFEB
   992                           fsr0h	equ	0xFEA
   993                           fsr0l	equ	0xFE9
   994                           wreg	equ	0xFE8
   995                           indf1	equ	0xFE7
   996                           postinc1	equ	0xFE6
   997                           postdec1	equ	0xFE5
   998                           preinc1	equ	0xFE4
   999                           plusw1	equ	0xFE3
  1000                           fsr1h	equ	0xFE2
  1001                           fsr1l	equ	0xFE1
  1002                           bsr	equ	0xFE0
  1003                           indf2	equ	0xFDF
  1004                           postinc2	equ	0xFDE
  1005                           postdec2	equ	0xFDD
  1006                           preinc2	equ	0xFDC
  1007                           plusw2	equ	0xFDB
  1008                           fsr2h	equ	0xFDA
  1009                           fsr2l	equ	0xFD9
  1010                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     19      25
    BANK1           256      0       0
    BANK2           256      0       0
    BANK0           160      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_calibrate
    _calibrate->___awdiv

Critical Paths under _int0 in COMRAM

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _int0 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _int0 in BANK2

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _int0 in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    1642
                                             14 COMRAM     5     5      0
                          _calibrate
                    _change_position
                           _read_adc
 ---------------------------------------------------------------------------------
 (1) _calibrate                                            6     6      0    1170
                                              8 COMRAM     6     6      0
                            ___awdiv
                    _change_position
                           _read_adc
 ---------------------------------------------------------------------------------
 (1) _read_adc                                             4     2      2      24
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _change_position                                      2     0      2     402
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     604
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _int0                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calibrate
     ___awdiv
     _change_position
     _read_adc
   _change_position
   _read_adc

 _int0 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      18        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       4        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       3        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     13      19       1       26.6%
BITBIGSFRll         4A      0       0      16        0.0%
BITBIGSFRlhhh       2A      0       0      12        0.0%
BITBIGSFRhhh        29      0       0       9        0.0%
BITBIGSFRhhl         E      0       0      10        0.0%
BITBIGSFRlhll        7      0       0      15        0.0%
BITBIGSFRlhlh        6      0       0      14        0.0%
BITBIGSFRlhhl        2      0       0      13        0.0%
BITBIGSFRhl          1      0       0      11        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      19      17        0.0%
DATA                 0      0      19      19        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon Jun 27 12:21:10 2022

                     l41 0270                       l34 0294                       l48 00E2  
           ___awdiv@sign 0006                      l340 01A6                      u200 00F6  
                    u201 00F2                      u210 0110                      u211 010C  
                    u220 0136                      u221 0132                      u230 0154  
                    u231 0150                      u240 0170                      u241 016C  
                    u250 0196                      u251 0192                      u180 0286  
                    u260 005E                      u181 0282                      u261 005A  
                    u190 025C                      u270 00C2                      u191 0258  
                    u271 00BE                      u280 0204                      u281 0200  
                    u290 023E                      u291 023A                     l1202 0012  
                   l1220 007A                     l1212 0032                     l1204 001E  
                   l1150 024A                     l1142 0272                     l1230 00A2  
                   l1222 0082                     l1214 003E                     l1206 002A  
                   l1160 00E8                     l1152 025C                     l1144 0278  
                   l1232 00A6                     l1216 0042                     l1240 01A8  
                   l1170 0118                     l1162 00F6                     l1154 0268  
                   l1146 0278                     l1234 00C2                     l1218 005E  
                   l1250 01BE                     l1242 01B0                     l1180 0146  
                   l1172 011C                     l1164 00FE                     l1148 0286  
                   l1236 00DE                     l1228 0096                     l1260 01DA  
                   l1252 01C2                     l1244 01B4                     l1190 017A  
                   l1182 0154                     l1174 0124                     l1166 0102  
                   l1158 00E4                     l1270 0220                     l1262 01E6  
                   l1254 01C6                     l1246 01B6                     l1192 0180  
                   l1184 015A                     l1176 0136                     l1168 0110  
                   l1272 023E                     l1264 0204                     l1256 01CA  
                   l1248 01BA                     l1186 0170                     l1178 013E  
                   l1194 0186                     l1266 0208                     l1258 01CE  
                   l1196 0196                     l1188 0178                     l1268 0214  
                   l1198 019E                     _LATC 000F8B                     i2l29 000A  
                   _int0 0008                     _main 01A8                     btemp 001A  
                   start 000E             ___param_bank 000000                    ?_int0 0001  
                  ?_main 0001          __end_of___awdiv 01A8          ___awdiv@divisor 0003  
        ___awdiv@counter 0005                    _PORTD 000F83                    _TRISA 000F92  
                  _TRISD 000F95                    ttemp5 001B                    ttemp6 001E  
                  ttemp7 0022                    status 000FD8                    wtemp8 001B  
        _change_position 024A          __initialization 0296             __end_of_int0 000E  
           __end_of_main 024A                   ??_int0 0001                   ??_main 000F  
          __activetblptr 000000                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADCON2 000FC0                   _ADRESH 000FC4         ___awdiv@dividend 0001  
                 _ANSELA 000F38                   _OSCCON 000FD3                ??___awdiv 0005  
       __end_of_read_adc 0296         ___awdiv@quotient 0007                   isa$std 000001  
__end_of_change_position 0272               __accesstop 0060  __end_of__initialization 02A2  
          ___rparam_used 000001           __pcstackCOMRAM 0001           calibrate@i_122 000B  
      __end_of_calibrate 00E4         ?_change_position 0001                ?_read_adc 0001  
             calibrate@i 0009                  __Hparam 0000                  __Lparam 0000  
                ___awdiv 00E4                  __pcinit 0296                  __ramtop 0300  
                __ptext0 01A8                  __ptext1 0012                  __ptext2 0272  
                __ptext3 024A                  __ptext4 00E4     end_of_initialization 02A2  
             ??_read_adc 0003      start_initialization 0296             calibrate@sum 000D  
            __pbssCOMRAM 0014                _calibrate 0012                __pintcode 0008  
               ?___awdiv 0001               ?_calibrate 0001              _LCD_RS_flag 0014  
             _ADCON0bits 000FC2           read_adc@result 0003                main@front 0010  
change_position@position 0001                 __Hrparam 0000                 __Lrparam 0000  
        _threshold_front 0018              ??_calibrate 0009                 _read_adc 0272  
               isa$xinst 000000                 int$flags 001A        ??_change_position 0003  
               main@back 0012                 intlevel2 0000           _threshold_back 0016  
